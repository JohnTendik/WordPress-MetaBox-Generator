{"version":3,"sources":["reportWebVitals.js","library/components/adminMenu/adminMenu.js","library/components/blankMetaBox/blankMetaBox.js","lib/store.js","library/components/fields/textfield/textfield.js","library/components/fields/field.js","library/components/dropDown/dropDown.js","library/components/customScreenTag/customScreenTag.js","library/components/inputs/checkbox/checkbox.js","library/components/inputs/radio/radiobutton.js","library/components/customMetaBox/editMetaBoxOptions.js","library/components/customMetaBox/generateMetaBox.js","lib/generateCodeTemplate.js","library/components/customMetaBox/customMetaBox.js","library/components/previewContainer/previewContainer.js","library/app/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AdminMenu","className","BlankMetaBox","props","useState","isOpen","setIsOpen","isStickyClass","sticky","onClick","color","customContent","initialState","metaBoxGlobalOptions","id","title","screens","textDomain","context","priority","fields","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","value","optionName","indx","includes","filter","screen","field","Error","dispatch","TextField","isEditting","useContext","defaultOptions","label","textFieldOptions","placeholder","numberFieldOptions","max","min","step","renderOptions","options","getAvailableOptions","map","optionField","onChange","evt","handleOptionsUpdate","currentTarget","replace","htmlFor","Field","setIsEditting","defaultProps","RenderField","DropDown","containerRef","useRef","useEffect","document","addEventListener","handleClickOutside","removeEventListener","current","contains","target","primary","buttonText","ref","CustomScreenTag","name","onClose","CheckboxInput","handleOnChange","checked","RadioInput","onValueChange","length","option","key","defaultChecked","EditMetaBoxOptions","newCPTInputValue","setNewCPTInputValue","handleScreenOptionChanges","setMetaBoxView","cpt","onKeyPress","GenerateMetaBox","text","generatedCode","join","fieldsHtml","savePostHtml","generateCode","useScroll","customStyle","maxHeight","overflow","showLineNumbers","language","theme","dracula","codeBlock","CustomMetaBox","metaBoxView","addNewField","PreviewContainer","defaultValue","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb461231.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport './adminMenu.scss';\n\nconst AdminMenu = () => {\n  \n  return (\n    <div className='admin-menu'>\n      <strong>JT's Meta Box Generator</strong>\n      <p>Thank you for using my stuffs!</p>\n    </div>\n  );\n};\n\nexport default AdminMenu;","import React, {useState} from 'react';\nimport { AiFillCaretDown, AiFillCaretUp } from 'react-icons/ai';\n\nimport './blankMetaBox.scss';\n\nconst BlankMetaBox = (props) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const isStickyClass = props.sticky ? 'sticky' : '';\n\n  return (\n    <div className={`meta-box ${isStickyClass}`}>\n      <div className='meta-box-header' onClick={() => setIsOpen(!isOpen)}>\n        <strong>Default Meta Box</strong>\n        { isOpen ? <AiFillCaretUp color=\"787c82\" /> : <AiFillCaretDown color=\"787c82\" /> }\n      </div>\n      { isOpen && (\n        <div className='meta-box-body'>\n          {props.customContent ? (\n            {...props.customContent}\n            ) : (\n            <>\n              <p>This is a default box for visual representation</p>\n              <div className='blank-content'></div>\n              <div className='blank-content'></div>\n              <div className='blank-content small'></div>\n              <div className='blank-content large'></div>\n              <div className='blank-content'></div>\n              <div className='blank-content small'></div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BlankMetaBox;","import React, {createContext, useReducer} from 'react';\n\nconst initialState = {\n  metaBoxGlobalOptions: {\n    id: 'jt-custom-meta-box-id',\n    title: 'Custom Meta Box',\n    screens: [],\n    textDomain: 'jt-mbg-text-domain',\n    context: 'advanced',\n    priority: 'default',\n    className: 'JT_MBG_CLASS'\n  },\n  fields: [],\n};\n\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ( { children } ) => {\n  const [state, dispatch] = useReducer((state, action) => {\n    switch(action.type) {\n      case 'action description':\n        const newState = {...state}// do something with the action\n        return newState;\n\n      case 'add new field': {\n        const newState = {...state, fields: [...state.fields, action.value]}\n        return newState;\n      }\n\n      case 'update meta box option': {\n        const newState = {...state, metaBoxGlobalOptions: {...state.metaBoxGlobalOptions, [action.value.optionName]: action.value.value}}\n        return newState;\n      }\n\n      case 'update field option': {\n        const fields = state.fields;\n        fields[action.value.indx] = {...fields[action.value.indx], [action.value.optionName]: action.value.value};\n        const newState = {...state, fields}\n        return newState;\n      };\n\n      case 'update screens': {\n        let screens = state.metaBoxGlobalOptions.screens;\n\n        if (screens.includes(action.value)) {\n          // remove\n          screens = screens.filter((screen) => screen !== action.value);\n        } else {\n          screens = [...screens, action.value];\n        }\n\n        const newState = {...state, metaBoxGlobalOptions: {\n          ...state.metaBoxGlobalOptions,\n          screens\n        }}\n\n        return newState;\n      };\n\n      case 'delete field': {\n        let fields = state.fields;\n        fields = fields.filter((field, indx) => indx !== action.value);\n\n        const newState = {...state, fields};\n        return newState;\n      };\n\n      default:\n        throw new Error();\n    };\n  }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider }","import { render } from '@testing-library/react';\nimport React, {useContext} from 'react';\n\nimport {store} from '../../../../lib/store';\n\nconst TextField = ({ field, isEditting, indx }) => {\n  const { dispatch } = useContext(store);\n  const defaultOptions = [{\n    label: 'Field Id',\n    value: field.id,\n    optionName: 'id',\n  },{\n    label: 'Field Label',\n    value: field.label,\n    optionName: 'label',\n  }];\n\n  const textFieldOptions = [{\n    label: 'Placeholder',\n    value: field.placeholder,\n    optionName: 'placeholder',\n  }];\n\n  const numberFieldOptions = [{\n    label: 'Max value',\n    value: field.max,\n    optionName: 'max',\n    type: 'number'\n  }, {\n    label: 'Min value',\n    value: field.min,\n    optionName: 'min',\n    type: 'number'\n  }, {\n    label: 'Step',\n    value: field.step,\n    optionName: 'step',\n    type: 'number'\n  }];\n\n  const getAvailableOptions = () => {\n    let options = [...defaultOptions];\n    switch (field.type) {\n      case 'text':\n        options = [...options, ...textFieldOptions];\n        break;\n      case 'number':\n        options = [...options, ...numberFieldOptions];\n      default:\n        break;\n    }\n    return options;\n  };\n\n  const renderPreview = () => {\n    return (\n      <div className='field-preview'>\n        <label htmlFor={field.id}>{field.label}</label>\n        <input {...field} />\n      </div>\n    );\n  };\n\n  const renderOptions = () => {\n    return getAvailableOptions().map((optionField) => {\n      return (\n        <div className='field-option-container'>\n          <label>{optionField.label}</label>\n          <input type={optionField.type || 'text'} value={optionField.value} onChange={(evt) => handleOptionsUpdate(evt, optionField.optionName)} />\n        </div>\n      )\n    });\n  };\n\n  const renderEdit = () => {\n    if (!isEditting) {\n      return;\n    } else {\n      return (\n        <div className='field-options'>\n          <h4>Field Options</h4>\n          {renderOptions()}\n        </div>\n      );\n    }\n  };\n\n  const handleOptionsUpdate = (evt, optionName) => {\n    let value = evt.currentTarget.value;\n\n    if (optionName === 'id') {\n      value = value.replace(/[- ]/gi,'_');\n      value = value.replace(/[^a-z0-9_]/gi,'');\n    }\n\n    dispatch({\n      type: 'update field option',\n      value: {\n        indx,\n        value,\n        optionName\n      }\n    })\n  };\n\n  return (\n    <div className='custom-field'>\n      {renderPreview()}\n      {renderEdit()}\n    </div>\n  );\n};\n\nexport default TextField;","import React, {useState, useContext} from 'react';\nimport { AiFillCaretDown, AiFillCaretUp, AiOutlineDelete } from 'react-icons/ai';\n\nimport './field.scss';\nimport { store } from '../../../lib/store';\nimport TextField from './textfield/textfield';\n\nconst Field = ({ field, indx }) => {\n  const { dispatch } = useContext(store);\n  const [isEditting, setIsEditting] = useState(false);\n\n  const handleEditField = () => {\n    setIsEditting(!isEditting);\n  };\n\n  const handleDeleteField = () => {\n    dispatch({\n      type: 'delete field',\n      value: indx\n    })\n  };\n\n  const RenderField = (props) => {\n    switch (field.type) {\n      case 'tel':\n      case 'url':\n      case 'text':\n      case 'email':\n      case 'color':\n      case 'number':\n      case 'hidden':\n      case 'password':\n        return <TextField {...props} />;\n        break;\n      default:\n        break;\n    }\n  };\n\n  const defaultProps = {\n    indx,\n    field,\n    isEditting,\n  };\n\n  return (\n    <div className={`custom-field-container ${isEditting ? 'editting' : ''}`}>\n      {RenderField(defaultProps)}\n      {isEditting && <button className='button edit-field' onClick={handleDeleteField}><AiOutlineDelete /> Delete</button>}\n      <button className='button edit-field' onClick={handleEditField}>{isEditting ? <AiFillCaretUp /> : <AiFillCaretDown />} Edit</button>\n    </div>\n  );\n};\n\nexport default Field;","import React, { useEffect, useRef, useState } from 'react';\nimport { AiOutlineDown } from 'react-icons/ai';\n\nimport './dropDown.scss';\n\nconst DropDown = (props) => {\n  const containerRef = useRef();\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    // mount\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // unmount\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleClickOutside = (evt) => {\n    if (containerRef && containerRef.current && !containerRef.current.contains(evt.target)) {\n      setIsOpen(false);\n    }\n  }\n\n  return (\n    <div className='dropdown-container'>\n      <button className={`${props.primary && 'primary'} button dropdown-button`} onClick={() => { setIsOpen(!isOpen) }}>{props.buttonText || 'Open'}</button>\n      {isOpen && (\n        <div onClick={() => setIsOpen(false)} ref={containerRef} className='dropdown-children'>\n          {props.children}\n        </div>\n      )}\n    </div>\n  )\n};\n\nexport default DropDown;","import React from 'react';\nimport Proptypes from 'prop-types';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nimport './customScreenTag.scss';\n\nconst CustomScreenTag = (props) => {\n\n  return (\n    <div className='tag'>\n      <span>{props.name}</span>\n      <button onClick={props.onClose}><AiOutlineClose /></button>\n    </div>\n  )\n};\n\nCustomScreenTag.propTypes = {\n  name: Proptypes.string.isRequired,\n  onClose: Proptypes.func.isRequired,\n};\n\nexport default CustomScreenTag;","import React, {useState} from 'react';\nimport Proptypes from 'prop-types';\n\nconst CheckboxInput = (props) => {\n  const {\n    title,\n    handleOnChange\n  } = props;\n\n  return (\n    <div className='checkbox-container'>\n      <span>{title}</span>\n      <input type='checkbox' onChange={(evt) => handleOnChange(evt.target.checked, evt)} />\n    </div>\n  )\n};\n\nCheckboxInput.propTypes = {\n  handleOnChange: Proptypes.func.isRequired,\n};\n\nexport default CheckboxInput;","import React from 'react';\nimport Proptypes from 'prop-types';\n\nimport './radiobutton.scss';\n\nconst RadioInput = (props) => {\n  const {\n    name,\n    value,\n    options,\n    handleOnChange\n  } = props;\n\n  const onValueChange = (evt) => {\n    const { name, value } = evt.target;\n    handleOnChange(evt, value);\n  };\n\n  if (!options.length) {\n    return;\n  }\n\n  return (\n    <div className='radio-buttons-container'>\n      {options.map((option, key) => {\n        return (\n          <label htmlFor={`${option}_${key}`} className='radioInput' key={key}><input id={`${option}_${key}`} defaultChecked={key === 0} checked={value === option} type='radio' name={name} value={option} onChange={onValueChange} /> {option}</label>\n        );\n      })}\n    </div>\n  )\n};\n\nRadioInput.propTypes = {\n  name: Proptypes.string.isRequired,\n  options: Proptypes.array.isRequired,\n  handleOnChange: Proptypes.func.isRequired,\n};\n\nexport default RadioInput;","import React, {useContext, useState} from 'react';\nimport { AiOutlineArrowRight, AiOutlinePlus } from 'react-icons/ai';\n\nimport { store } from '../../../lib/store';\nimport CustomScreenTag from '../customScreenTag/customScreenTag';\nimport CheckboxInput from '../inputs/checkbox/checkbox';\nimport RadioInput from '../inputs/radio/radiobutton';\n\nconst EditMetaBoxOptions = (props) => {\n  const { state, dispatch } = useContext(store);\n  const { metaBoxGlobalOptions } = state;\n  const [newCPTInputValue, setNewCPTInputValue] = useState('');\n\n  const handleOptionsUpdate = (evt, optionName) => {\n    const value = evt.currentTarget.value;\n    dispatch({\n      type: 'update meta box option',\n      value: {\n        value,\n        optionName\n      }\n    })\n  };\n\n  const handleScreenOptionChanges = (value, name) => {\n    if (name === '' || !name) {\n      return;\n    }\n\n    dispatch({\n      type: 'update screens',\n      value: name\n    });\n  };\n\n  const handleKeyPress = (evt) => {\n    if (evt.key === 'Enter') {\n      handleScreenOptionChanges(true, newCPTInputValue);\n      setNewCPTInputValue('');\n    }\n  };\n\n  return (\n    <div className='meta-box item edit-meta-box-screen'>\n      <div className='meta-box-header'>\n        <strong>Settings - {metaBoxGlobalOptions.title}</strong>\n        <div className='meta-box-actions'>\n          <button onClick={(evt) => {props.setMetaBoxView('fields')}} className='button edit-meta-done'>Fields <AiOutlineArrowRight /></button>\n        </div>\n      </div>\n      <div className='meta-box-body'>\n        <div className='meta-box-options-container'>\n          <p>General</p>\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Meta Box Title\n                <small><em>(string) (Required) Title of the meta box.</em></small>\n              </label>\n              <div>\n                <input placeholder={metaBoxGlobalOptions.title} value={metaBoxGlobalOptions.title} onChange={(evt) => handleOptionsUpdate(evt, 'title')} />\n              </div>\n            </div>\n          </div>\n          \n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Meta Box ID\n                <small><em>(string) (Required) Meta box ID (used in the 'id' attribute for the meta box).</em></small>\n              </label>\n              <div>\n                <input placeholder={metaBoxGlobalOptions.id} value={metaBoxGlobalOptions.id} onChange={(evt) => handleOptionsUpdate(evt, 'id')} />\n              </div>\n            </div>\n          </div>\n\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Screens\n                <small><em>(Optional) The screen or screens on which to show the box (such as a post type, 'link', or 'comment')</em></small>\n              </label>\n              <div>\n                <div className='screen-post-types'>\n                  <CheckboxInput title='post' handleOnChange={(value) => {handleScreenOptionChanges(value, 'post')}} />\n                  <CheckboxInput title='page' handleOnChange={(value) => {handleScreenOptionChanges(value, 'page')}} />\n                </div>\n                <div className='screen-post-types'>\n                  {metaBoxGlobalOptions.screens.filter((screen) => screen !== 'post' && screen !== 'page').map((cpt, indx) => {\n                    return <CustomScreenTag key={indx} name={cpt} onClose={() => handleScreenOptionChanges(true, cpt)} />\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Custom Screens\n                <small><em>Custom post types (such as 'movie', 'custom_post_type')</em></small>\n              </label>\n              \n              <div className='flex'>  \n                <input onKeyPress={handleKeyPress} placeholder='custom' value={newCPTInputValue} onChange={(evt) => setNewCPTInputValue(evt.currentTarget.value)} />\n                <button\n                  className='button'\n                  onClick={(evt) => {handleScreenOptionChanges(true, newCPTInputValue); setNewCPTInputValue('')}}>\n                  <AiOutlinePlus /> Add\n                  </button>\n              </div>\n            </div>\n          </div>\n\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Context\n                <small><em>(Optional) The context within the screen where the box should display. Available contexts vary from screen to screen. Post edit screen contexts include 'normal', 'side', and 'advanced'.</em></small>\n              </label>\n              <div>\n                <RadioInput\n                  name='context'\n                  value={metaBoxGlobalOptions.context}\n                  options={['advanced', 'side', 'normal']}\n                  handleOnChange={(evt) => handleOptionsUpdate(evt, 'context')} />\n              </div>\n            </div>\n          </div>\n\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Priority\n                <small><em>(Optional) The priority within the context where the box should show. Accepts 'high', 'core', 'default', or 'low'.</em></small>\n              </label>\n              <div>\n                <RadioInput\n                  name='priority'\n                  value={metaBoxGlobalOptions.priority}\n                  options={['high', 'core', 'default', 'low']}\n                  handleOnChange={(evt) => handleOptionsUpdate(evt, 'priority')} />\n              </div>\n            </div>\n          </div>\n\n          <p>Advanced</p>\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Text Domain\n                <small><em>(Optional) text domain for translations</em></small>\n              </label>\n              \n              <div>\n                <input placeholder={metaBoxGlobalOptions.textDomain} value={metaBoxGlobalOptions.textDomain} onChange={(evt) => handleOptionsUpdate(evt, 'textDomain')} />\n              </div>\n            </div>\n          </div>\n\n          <div className='meta-box-option'>\n            <div>\n              <label>\n                Class Name\n                <small><em>(Optional) The php class name that will be given for your code</em></small>\n              </label>\n              \n              <div>\n                <input placeholder={metaBoxGlobalOptions.className} value={metaBoxGlobalOptions.className} onChange={(evt) => handleOptionsUpdate(evt, 'className')} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='meta-box-footer'>\n        <button onClick={(evt) => {props.setMetaBoxView('fields')}} className='button primary'>Fields <AiOutlineArrowRight /></button>\n      </div>\n    </div>\n  )\n};\n\nexport default EditMetaBoxOptions;","import React, {useContext, useState} from 'react';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { CopyBlock, dracula } from \"react-code-blocks\";\n\nimport { store } from '../../../lib/store';\nimport Code from '../../../lib/generateCodeTemplate.js';\n\nconst GenerateMetaBox = (props) => {\n  const { state, dispatch } = useContext(store);\n  const { metaBoxGlobalOptions, fields } = state;\n\n  const generateCode = () => {\n    let generatedCode = Code;\n\n    generatedCode = generatedCode.replace('@@metabox-id@@', metaBoxGlobalOptions.id);\n    generatedCode = generatedCode.replace('@@metabox-title@@', metaBoxGlobalOptions.title);\n    generatedCode = generatedCode.replace('@@text-domain@@', metaBoxGlobalOptions.textDomain);\n    generatedCode = generatedCode.replace('@@context@@', metaBoxGlobalOptions.context);\n    generatedCode = generatedCode.replace('@@priority@@', metaBoxGlobalOptions.priority);\n\n    if (metaBoxGlobalOptions.screens.length) {\n      let screens = metaBoxGlobalOptions.screens.map((screen) => `'${screen}'`);\n      generatedCode = generatedCode.replace('@@screens@@', screens.join(','));\n    } else {\n      generatedCode = generatedCode.replace('@@screens@@', '');\n    }\n\n    if (fields.length) {\n      let fieldsHtml = fields.map((field) => {\n        return `\n          $${field.id}_value = $this->get_value('${field.id}');\n          echo \"<div class='jt-meta-box-flex'><label for='${field.id}'>${field.label}</label><input id='${field.id}' name='${field.id}' value='$${field.id}_value' type='${field.type}' placeholder='${field.placeholder}' /></div>\";\n        `;\n      });\n      generatedCode = generatedCode.replace('@@fields@@', fieldsHtml.join('\\n\\r'));\n\n      // save posts\n      let savePostHtml = fields.map((field) => `$${field.id}_new_val = ( isset( $_POST['${field.id}'] ) ? sanitize_html_class( $_POST['${field.id}'] ) : null );\n      if ($${field.id}_new_val !== null) {\n        update_post_meta( $post_id, $meta_key_prefix . \"${field.id}\", $${field.id}_new_val );\n      }`);\n      generatedCode = generatedCode.replace('@@save_post@@', savePostHtml.join('\\n\\r'));\n    } else {\n      generatedCode = generatedCode.replace('@@fields@@', '');\n    }    \n\n    return generatedCode;\n  };\n\n  return (\n    <div className='meta-box generate-meta-box-screen'>\n      <div className='meta-box-header'>\n        <strong>Fields - {metaBoxGlobalOptions.title}</strong>\n        <div className='meta-box-actions'>\n          <button onClick={(evt) => {props.setMetaBoxView('fields')}} className='button edit-meta-done'><AiOutlineArrowLeft /> Fields</button>\n        </div>\n      </div>\n      <div className='meta-box-body'>\n        <CopyBlock\n          text={generateCode()}\n          useScroll\n          customStyle={{\n            maxHeight: '600px',\n            overflow: 'scroll',\n          }}\n          showLineNumbers={true}\n          language={'php'}\n          theme={dracula}\n          codeBlock\n        />\n      </div>\n    </div>\n  )\n};\n\nexport default GenerateMetaBox;","export default `<?php\n\n/**\n * Generated by the WordPress Meta Box Generator By John Tendik\n * https://johntendik.com/tools/wordpress-meta-box-generator/\n * \n * Retrieving the values:\n * test = get_post_meta( get_the_ID(), 'name_of_field', true )\n */\n\nclass JT_Metabox_Generator {\n  public function __construct() {\n\t\tadd_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );\n\t\tadd_action( 'save_post', array( $this, 'save_post' ), 10, 2 );\n\t}\n\n  public function add_meta_boxes() {\n    add_meta_box(\n      '@@metabox-id@@',\n      __('@@metabox-title@@', '@@text-domain@@'),\n      array( $this, 'add_meta_box_callback' ),\n      array(@@screens@@),\n      '@@context@@',\n      '@@priority@@'\n    );\n\t}\n\n  public function save_post($post_id, $post) {\n    /* Verify the nonce before proceeding. */\n    if ( !isset( $_POST['jt_metabox_nonce'] ) || !wp_verify_nonce( $_POST['jt_metabox_nonce'], basename( __FILE__ ) ) )\n      return $post_id;\n\n    /* Get the post type object. */\n    $post_type = get_post_type_object( $post->post_type );\n  \n    /* Check if the current user has permission to edit the post. */\n    if ( !current_user_can( $post_type->cap->edit_post, $post_id ) )\n      return $post_id;\n\n    /* Get the meta key. */\n    $meta_key_prefix = 'jt_mbg_';\n\n\n    /* DO NOT FORGET TO DO YOUR OWN SANITIZATION HERE!! */\n\n    @@save_post@@\n  }\n\n  public function add_meta_box_callback() {\n    echo \"<style>div.jt-meta-box-flex{display:flex;align-items:flex-start;margin: 14px 0;}div.jt-meta-box-flex label{width: 190px;margin: 0}</style>\";\n\n    wp_nonce_field( basename( __FILE__ ), 'jt_metabox_nonce' );\n    @@fields@@\n  }\n\n  private function get_value($id) {\n    global $post;\n    $meta_key_prefix = 'jt_mbg_';\n\t\tif ( metadata_exists( 'post', $post->ID, $meta_key_prefix . $id ) ) {\n\t\t\t$value = get_post_meta( $post->ID, $meta_key_prefix . $id, true );\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t\treturn $value;\n  }\n}\n\nnew JT_Metabox_Generator;\n\n?>`;","import React, {useContext, useState} from 'react';\nimport { AiOutlineArrowLeft, AiOutlineArrowRight, AiOutlinePlus } from 'react-icons/ai';\n\nimport './customMetaBox.scss';\nimport Field from '../fields/field';\nimport DropDown from '../dropDown/dropDown';\nimport { store } from '../../../lib/store';\nimport EditMetaBoxOptions from './editMetaBoxOptions';\nimport GenerateMetaBox from './generateMetaBox';\n\nconst CustomMetaBox = () => {\n  const { state, dispatch } = useContext(store);\n  const { metaBoxGlobalOptions, fields } = state;\n  \n  const [metaBoxView, setMetaBoxView] = useState('settings');\n\n  const renderFields = () => {\n    return fields.map((field, indx) => (\n      <Field field={field} indx={indx} key={indx} />\n    ));\n  };\n\n  const addNewField = (type) => {\n    dispatch({\n      type: 'add new field',\n      value: {\n        id: `new_field_id_${fields.length}`,\n        type,\n        label: 'New field',\n      }\n    })\n  };\n\n  const renderFieldsScreen = () => (\n    <div className='meta-box'>\n      <div className='meta-box-header'>\n        <strong>Fields - {metaBoxGlobalOptions.title}</strong>\n        <div className='meta-box-actions'>\n          <button onClick={(evt) => {setMetaBoxView('settings')}} className='button edit-meta-done'><AiOutlineArrowLeft /> Settings</button>\n          <button onClick={(evt) => {setMetaBoxView('code')}} className='button edit-meta-done'>Code <AiOutlineArrowRight /></button>\n        </div>\n      </div>\n      <div className='meta-box-body'>\n        { !fields.length ? (\n            <div>\n              <p>Begin by adding a new field to your meta-box!</p>\n            </div>\n        ) : renderFields()}\n      </div>\n      <div className='meta-box-footer'>\n        <DropDown primary={true} buttonText={<>Add New Field <AiOutlinePlus /></>}>\n          <button onClick={() => addNewField('text')}>Text</button>\n          <button onClick={() => addNewField('number')}>Number</button>\n          <button onClick={() => addNewField('tel')}>Tel</button>\n          <button onClick={() => addNewField('url')}>Url</button>\n          <button onClick={() => addNewField('password')}>Password</button>\n          <button onClick={() => addNewField('email')}>Email</button>\n          <button onClick={() => addNewField('hidden')}>Hidden</button>\n          <button onClick={() => addNewField('color')}>Color</button>\n        </DropDown>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      {metaBoxView === 'settings' && <EditMetaBoxOptions setMetaBoxView={setMetaBoxView} />}\n      {metaBoxView === 'fields' && renderFieldsScreen()}\n      {metaBoxView === 'code' && <GenerateMetaBox setMetaBoxView={setMetaBoxView}/>}\n    </div>\n  );\n};\n\nexport default CustomMetaBox;","import React, {useEffect} from 'react';\n\nimport './previewContainer.scss';\nimport BlankMetaBox from '../blankMetaBox/blankMetaBox';\nimport CustomMetaBox from '../customMetaBox/customMetaBox';\n\nconst PreviewContainer = () => {\n\n  return (\n    <section className='layout-container'>\n      <div className='main dropzone'>\n        <input className='post-title' defaultValue='WordPress Post Title' />\n        <BlankMetaBox customContent={(\n            <>\n              <p>This is a default box for visual representation. Scroll down to setup your custom meta box!</p>\n              <div className='blank-content'></div>\n              <div className='blank-content'></div>\n              <div className='blank-content small'></div>\n              <div className='blank-content large'></div>\n              <div className='blank-content'></div>\n              <div className='blank-content small'></div>\n            </>\n          )} />\n        <div className='item'>\n          <CustomMetaBox />\n        </div>\n      </div>\n      <div className='side dropzone'>\n        <BlankMetaBox customContent={(\n          <>\n            <p>This is a default box for visual representation</p>\n            <div className='blank-content'></div>\n            <div className='blank-content'></div>\n            <div className='blank-content small'></div>\n          </>\n        )} />\n        <BlankMetaBox customContent={(\n          <>\n            <p>Once you are happy with your meta box, click the generate button below to get your code for free!</p>\n            <button className='button primary'>Generate</button>\n          </>\n        )} />\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewContainer;","import AdminMenu from '../components/adminMenu/adminMenu';\nimport PreviewContainer from '../components/previewContainer/previewContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AdminMenu />\n      <PreviewContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\nimport App from './library/app/App';\nimport { StateProvider } from './lib/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}